import telebot
import random
import json
import os
import requests
import base64
from flask import Flask, request
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
TOKEN = os.environ["TOKEN"]
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–∞
user_sessions = {}
last_images = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç –∏–∑ JSON
def load_cards(filename):
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return []

# –ú–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(
    KeyboardButton("üîÆ –ü–æ—Å–ª–∞–Ω–∏–µ –¥–Ω—è"),
    KeyboardButton("üîî –°–æ–≤–µ—Ç"),
    KeyboardButton("üìö –ö–æ–ª–æ–¥—ã"),
    KeyboardButton("üß† –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ")
)

deck_menu = ReplyKeyboardMarkup(resize_keyboard=True)
deck_menu.add(
    KeyboardButton("üßø –ê—Ä—Ö–µ—Ç–∏–ø—ã"),
    KeyboardButton("ü™∂ –ú—É–¥—Ä–æ—Å—Ç—å"),
    KeyboardButton("üåÄ –ü—Ä–æ—Ü–µ—Å—Å—ã"),
    KeyboardButton("üêæ –ü–æ—Å–ª–∞–Ω–∏—è –∑–≤–µ—Ä–µ–π"),
    KeyboardButton("üêÖ –ñ–∏–≤–æ—Ç–Ω—ã–µ —Å–∏–ª—ã"),
    KeyboardButton("üßö –°–∫–∞–∑–æ—á–Ω—ã–µ –≥–µ—Ä–æ–∏"),
    KeyboardButton("üéØ –§–æ–∫—É—Å –≤–Ω–∏–º–∞–Ω–∏—è"),
    KeyboardButton("üß± –ü—Ä–∏—á–∏–Ω—ã"),
    KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
)

reason_menu = ReplyKeyboardMarkup(resize_keyboard=True)
reason_menu.add(
    KeyboardButton("üî• –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è"),
    KeyboardButton("üò± –°—Ç—Ä–∞—Ö–∏"),
    KeyboardButton("üí´ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è"),
    KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–ª–æ–¥
DECKS = {
    "üßø –ê—Ä—Ö–µ—Ç–∏–ø—ã": "cards.json",
    "ü™∂ –ú—É–¥—Ä–æ—Å—Ç—å": "wise_cards.json",
    "üåÄ –ü—Ä–æ—Ü–µ—Å—Å—ã": "processes.json",
    "üêæ –ü–æ—Å–ª–∞–Ω–∏—è –∑–≤–µ—Ä–µ–π": "wise_animales.json",
    "üêÖ –ñ–∏–≤–æ—Ç–Ω—ã–µ —Å–∏–ª—ã": "power_animals.json",
    "üßö –°–∫–∞–∑–æ—á–Ω—ã–µ –≥–µ—Ä–æ–∏": "fairytale_heroes.json",
    "üéØ –§–æ–∫—É—Å –≤–Ω–∏–º–∞–Ω–∏—è": "focus_cards.json"
}

REASONS = {
    "üî• –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è": ("transformation.json", "üî• –ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è"),
    "üò± –°—Ç—Ä–∞—Ö–∏": ("fears.json", "üò± –¢–≤–æ–π —Å—Ç—Ä–∞—Ö"),
    "üí´ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è": ("blessings.json", "üí´ –¢–≤–æ—ë —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ")
}

TEXT_DECKS = ["transformation.json", "fears.json", "blessings.json"]

# –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def send_card_with_analysis(chat_id, card, is_text_deck=False, message_suffix=""):
    if is_text_deck:
        text = card.get("text", "")
        label = next((lbl for key, (file, lbl) in REASONS.items() if file in TEXT_DECKS), "")
        bot.send_message(chat_id, f"{label}: {text}")
    elif "file_ids" in card:
        for file_id in card["file_ids"]:
            bot.send_photo(chat_id, file_id)
            last_images[chat_id] = file_id
    elif "file_id" in card:
        bot.send_photo(chat_id, card["file_id"])
        last_images[chat_id] = file_id
    elif "text" in card:
        bot.send_message(chat_id, card["text"])
        last_images[chat_id] = None  # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–∞—Ä—Ç –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    markup = InlineKeyboardMarkup()
    if not is_text_deck and last_images.get(chat_id):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        markup.add(InlineKeyboardButton("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É", callback_data="analyze_last"))
    markup.add(InlineKeyboardButton("üó£ –û–±—Å—É–¥–∏—Ç—å —ç—Ç–æ", callback_data="start_chat"))
    question = "–•–æ—á–µ—à—å —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–Ω—è—Ç—å –≥–ª—É–±–∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ–π –∫–∞—Ä—Ç—ã?" if not is_text_deck else "–•–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ–± —ç—Ç–æ–º?"
    bot.send_message(chat_id, question, reply_markup=markup)
    if message_suffix:
        bot.send_message(chat_id, message_suffix)

def send_random_card(chat_id, filename, message_suffix=""):
    cards = load_cards(filename)
    if not cards:
        bot.send_message(chat_id, "–ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞ üòï")
        return
    is_text_deck = filename in TEXT_DECKS
    card = random.choice(cards)
    send_card_with_analysis(chat_id, card, is_text_deck, message_suffix)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –º–µ–Ω—é
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏, —Å —á–µ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å:", reply_markup=main_menu)

@bot.message_handler(func=lambda m: m.text == "üìö –ö–æ–ª–æ–¥—ã")
def show_decks(message):
    bot.send_message(
        message.chat.id,
        "–ó–∞–¥—É–º–∞–π—Å—è –Ω–∞–¥ —Å–≤–æ–∏–º –∑–∞–ø—Ä–æ—Å–æ–º. –í—ã–±–µ—Ä–∏ –∫–æ–ª–æ–¥—É –∏ –Ω–∞–∂–º–∏ –Ω–∞ –Ω–µ–µ, –¥–µ—Ä–∂–∞ –≤ –≥–æ–ª–æ–≤–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.",
        reply_markup=deck_menu
    )

@bot.message_handler(func=lambda m: m.text == "üß± –ü—Ä–∏—á–∏–Ω—ã")
def show_reasons(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏, —Å —á–µ–º —Ö–æ—á–µ—à—å –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å:", reply_markup=reason_menu)

@bot.message_handler(func=lambda m: m.text == "üîÆ –ü–æ—Å–ª–∞–Ω–∏–µ –¥–Ω—è")
def daily_message(message):
    all_files = list(DECKS.values())
    all_cards = [card for file in all_files for card in load_cards(file)]
    if not all_cards:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç üòï")
        return
    card = random.choice(all_cards)
    send_card_with_analysis(message.chat.id, card, is_text_deck=False, message_suffix="–≠—Ç–∞ –∫–∞—Ä—Ç–∞ ‚Äî —Ç–≤–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ß—Ç–æ –æ–Ω–∞ —Ç–µ–±–µ –≥–æ–≤–æ—Ä–∏—Ç?")

@bot.message_handler(func=lambda m: m.text == "üîî –°–æ–≤–µ—Ç")
def advice(message):
    all_files = list(DECKS.values())
    all_cards = [card for file in all_files for card in load_cards(file)]
    if not all_cards:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç üòï")
        return
    card = random.choice(all_cards)
    send_card_with_analysis(message.chat.id, card, is_text_deck=False, message_suffix="–ß—Ç–æ —ç—Ç–∞ –∫–∞—Ä—Ç–∞ —Ç–µ–±–µ —Å–æ–≤–µ—Ç—É–µ—Ç?")

@bot.message_handler(func=lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def go_back(message):
    current_menu = deck_menu if message.text in DECKS or message.text == "üß± –ü—Ä–∏—á–∏–Ω—ã" else main_menu
    bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –Ω–∞–∑–∞–¥:", reply_markup=current_menu)

@bot.message_handler(func=lambda m: m.text in DECKS)
def handle_deck_selection(message):
    send_random_card(message.chat.id, DECKS[message.text])

@bot.message_handler(func=lambda m: m.text in REASONS)
def handle_reason_selection(message):
    filename, _ = REASONS[message.text]
    send_random_card(message.chat.id, filename)

# –ß–∞—Ç –∏ –∞–Ω–∞–ª–∏–∑
@bot.callback_query_handler(func=lambda call: call.data == "start_chat")
def start_chat_session(call):
    chat_id = call.message.chat.id
    user_sessions[chat_id] = []
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å —á–∞—Ç", callback_data="end_chat"))
    bot.send_message(chat_id, "–î–∞–≤–∞–π –æ–±—Å—É–¥–∏–º. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –≤—ã–∑–≤–∞–ª–æ —É —Ç–µ–±—è —ç—Ç–∞ –∫–∞—Ä—Ç–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç?", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "end_chat")
def end_chat_session(call):
    chat_id = call.message.chat.id
    if chat_id in user_sessions:
        del user_sessions[chat_id]
    bot.send_message(chat_id, "–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é:", reply_markup=main_menu)

@bot.message_handler(func=lambda m: m.chat.id in user_sessions)
def handle_user_chat(message):
    chat_id = message.chat.id
    user_sessions[chat_id].append({"role": "user", "content": message.text})
    response = call_gpt35(user_sessions[chat_id])
    user_sessions[chat_id].append({"role": "assistant", "content": response})
    bot.send_message(chat_id, response)

def call_gpt35(history):
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}", "Content-Type": "application/json"}
    data = {"model": "gpt-3.5-turbo", "messages": history, "max_tokens": 500}
    response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=data)
    return response.json()["choices"][0]["message"]["content"] if response.status_code == 200 else f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {response.text}"

@bot.message_handler(content_types=['photo'])
def receive_photo(message):
    file_id = message.photo[-1].file_id
    last_images[message.chat.id] = file_id
    bot.send_photo(message.chat.id, file_id)
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É", callback_data="analyze_last"))
    markup.add(InlineKeyboardButton("üó£ –û–±—Å—É–¥–∏—Ç—å —ç—Ç–æ", callback_data="start_chat"))
    bot.send_message(message.chat.id, "–•–æ—á–µ—à—å —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–Ω—è—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É?", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "analyze_last")
def analyze_last_card(call):
    chat_id = call.message.chat.id
    file_id = last_images.get(chat_id)
    if not file_id:
        bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    file_info = bot.get_file(file_id)
    file = bot.download_file(file_info.file_path)
    analysis = call_gpt_for_image(file)
    bot.send_message(chat_id, analysis)

def call_gpt_for_image(image_bytes):
    base64_image = base64.b64encode(image_bytes).decode('utf-8')
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}", "Content-Type": "application/json"}
    data = {
        "model": "gpt-4o",
        "messages": [
            {"role": "system", "content": "–¢—ã –ø—Å–∏—Ö–æ–ª–æ–≥, –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É—é—â–∏–π –∫–∞—Ä—Ç—ã –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–Ω–æ –∏ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ."},
            {"role": "user", "content": [
                {"type": "text", "text": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É –∫–∞—Ä—Ç—É. –ß—Ç–æ –æ–Ω–∞ –º–æ–∂–µ—Ç —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å?"},
                {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"}}
            ]}
        ],
        "max_tokens": 700
    }
    response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=data)
    return response.json()["choices"][0]["message"]["content"] if response.status_code == 200 else f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {response.text}"

@bot.message_handler(func=lambda m: m.text == "üß† –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ")
def prompt_for_photo(message):
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

@bot.message_handler(func=lambda m: m.text not in {btn.text for menu in [main_menu, deck_menu, reason_menu] for btn in menu.keyboard[0]})
def handle_fallback_text(message):
    bot.send_message(message.chat.id, "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")

# –í–µ–±—Ö—É–∫
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=f"https://{os.environ['RENDER_EXTERNAL_HOSTNAME']}/{TOKEN}")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
