import telebot
import random
import json
import os
import requests
import base64
from flask import Flask, request
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = os.environ["TOKEN"]
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

user_sessions = {}

def load_cards(filename):
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return []

main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(
    KeyboardButton("üîÆ –ö–∞—Ä—Ç–∞ –¥–Ω—è"),
    KeyboardButton("üí° –°–æ–≤–µ—Ç"),
    KeyboardButton("üìö –ö–æ–ª–æ–¥—ã"),
    KeyboardButton("üß† –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ")
)

deck_menu = ReplyKeyboardMarkup(resize_keyboard=True)
deck_menu.add(
    KeyboardButton("üßø –ê—Ä—Ö–µ—Ç–∏–ø—ã"),
    KeyboardButton("ü™∂ –ú—É–¥—Ä–æ—Å—Ç—å"),
    KeyboardButton("üåÄ –ü—Ä–æ—Ü–µ—Å—Å—ã"),
    KeyboardButton("üêæ –ü–æ—Å–ª–∞–Ω–∏—è –∑–≤–µ—Ä–µ–π"),
    KeyboardButton("üêÖ –ñ–∏–≤–æ—Ç–Ω—ã–µ —Å–∏–ª—ã"),
    KeyboardButton("üßö –°–∫–∞–∑–æ—á–Ω—ã–µ –≥–µ—Ä–æ–∏"),
    KeyboardButton("üéØ –§–æ–∫—É—Å –≤–Ω–∏–º–∞–Ω–∏—è"),
    KeyboardButton("üß± –ü—Ä–∏—á–∏–Ω—ã"),
    KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
)

reason_menu = ReplyKeyboardMarkup(resize_keyboard=True)
reason_menu.add(
    KeyboardButton("üî• –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è"),
    KeyboardButton("üò± –°—Ç—Ä–∞—Ö–∏"),
    KeyboardButton("üí´ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è"),
    KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
)

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏, —Å —á–µ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å:",
        reply_markup=main_menu
    )

@bot.message_handler(func=lambda m: m.text == "üìö –ö–æ–ª–æ–¥—ã")
def show_decks(message):
    bot.send_message(
        message.chat.id,
        "–ó–∞–¥—É–º–∞–π—Å—è –Ω–∞–¥ —Å–≤–æ–∏–º –∑–∞–ø—Ä–æ—Å–æ–º. –í—ã–±–µ—Ä–∏ –∫–æ–ª–æ–¥—É –∏ –Ω–∞–∂–º–∏ –Ω–∞ –Ω–µ–µ, –¥–µ—Ä–∂–∞ –≤ –≥–æ–ª–æ–≤–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. –¢—ã –ø–æ–ª—É—á–∏—à—å –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç.",
        reply_markup=deck_menu
    )

@bot.message_handler(func=lambda m: m.text == "üß± –ü—Ä–∏—á–∏–Ω—ã")
def show_reasons(message):
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏, —Å —á–µ–º —Ö–æ—á–µ—à—å –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å:",
        reply_markup=reason_menu
    )

@bot.message_handler(func=lambda m: m.text == "üîÆ –ö–∞—Ä—Ç–∞ –¥–Ω—è")
def daily_message(message):
    all_files = [
        "cards.json", "wise_cards.json", "processes.json",
        "wise_animales.json", "power_animals.json",
        "focus_cards.json", "fairytale_heroes.json"
    ]
    all_cards = []
    for file in all_files:
        all_cards.extend(load_cards(file))
    card = random.choice(all_cards)
    send_card_with_analysis(message.chat.id, card)
    bot.send_message(message.chat.id, "–≠—Ç–∞ –∫–∞—Ä—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ, —á—Ç–æ –∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å —Ç–µ–±–µ –≤–∞–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å, –ø–æ–Ω—è—Ç—å. –≠—Ç–æ –ø–æ—Å–ª–∞–Ω–∏–µ —Ç–µ–±–µ. –ö–∞–∫–æ–µ –æ–Ω–æ? –ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç —Ç–µ–±–µ —ç—Ç–∞ –∫–∞—Ä—Ç–∞?")

@bot.message_handler(func=lambda m: m.text == "üí° –°–æ–≤–µ—Ç")
def handle_advice(message):
    all_files = [
        "wise_cards.json", "processes.json", "focus_cards.json"
    ]
    all_cards = []
    for file in all_files:
        all_cards.extend(load_cards(file))
    if not all_cards:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç –¥–ª—è —Å–æ–≤–µ—Ç–∞.")
        return
    card = random.choice(all_cards)
    send_card_with_analysis(message.chat.id, card)
    bot.send_message(
        message.chat.id,
        "–°–¥–µ–ª–∞–π –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö –∏ –∑–∞–¥–∞–π —Å–µ–±–µ –≤–æ–ø—Ä–æ—Å:\n\n<b>–ö–∞–∫–æ–π —Å–æ–≤–µ—Ç –º–Ω–µ –Ω—É–∂–µ–Ω –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?</b>\n\n–°–æ—Ö—Ä–∞–Ω—è—è —ç—Ç–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Äî —Ç—ã –ø–æ–ª—É—á–∏—à—å –ø–æ—Å–ª–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏.",
        parse_mode="HTML"
    )

@bot.message_handler(func=lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def go_back(message):
    bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)

@bot.message_handler(func=lambda m: m.text == "üßø –ê—Ä—Ö–µ—Ç–∏–ø—ã")
def deck_archetypes(message):
    send_random_card_from_file(message, "cards.json")

@bot.message_handler(func=lambda m: m.text == "ü™∂ –ú—É–¥—Ä–æ—Å—Ç—å")
def deck_wisdom(message):
    send_random_card_from_file(message, "wise_cards.json")

@bot.message_handler(func=lambda m: m.text == "üåÄ –ü—Ä–æ—Ü–µ—Å—Å—ã")
def deck_processes(message):
    send_random_card_from_file(message, "processes.json")

@bot.message_handler(func=lambda m: m.text == "üêæ –ü–æ—Å–ª–∞–Ω–∏—è –∑–≤–µ—Ä–µ–π")
def deck_wise_animals(message):
    send_random_card_from_file(message, "wise_animales.json")

@bot.message_handler(func=lambda m: m.text == "üêÖ –ñ–∏–≤–æ—Ç–Ω—ã–µ —Å–∏–ª—ã")
def deck_power_animals(message):
    send_random_card_from_file(message, "power_animals.json")

@bot.message_handler(func=lambda m: m.text == "üßö –°–∫–∞–∑–æ—á–Ω—ã–µ –≥–µ—Ä–æ–∏")
def deck_fairytale(message):
    send_random_card_from_file(message, "fairytale_heroes.json")

@bot.message_handler(func=lambda m: m.text == "üéØ –§–æ–∫—É—Å –≤–Ω–∏–º–∞–Ω–∏—è")
def deck_focus(message):
    send_random_card_from_file(message, "focus_cards.json")

@bot.message_handler(func=lambda m: m.text == "üî• –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è")
def show_transformation(message):
    items = load_cards("transformation.json")
    if not items:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π –ø—É—Å—Ç.")
        return
    bot.send_message(message.chat.id, random.choice(items))

@bot.message_handler(func=lambda m: m.text == "üò± –°—Ç—Ä–∞—Ö–∏")
def show_fears(message):
    items = load_cards("fears.json")
    if not items:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞—Ö–æ–≤ –ø—É—Å—Ç.")
        return
    bot.send_message(message.chat.id, random.choice(items))

@bot.message_handler(func=lambda m: m.text == "üí´ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è")
def show_blessings(message):
    items = load_cards("blessings.json")
    if not items:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø—É—Å—Ç.")
        return
    bot.send_message(message.chat.id, random.choice(items))


