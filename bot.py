import telebot
import random
import json
import os
import requests
import base64
from flask import Flask, request
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = os.environ["TOKEN"]
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

user_sessions = {}


def load_cards(filename):
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return []


main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(
    KeyboardButton("üîÆ –ö–∞—Ä—Ç–∞ –¥–Ω—è"),
    KeyboardButton("üí° –°–æ–≤–µ—Ç"),
    KeyboardButton("üìö –ö–æ–ª–æ–¥—ã"),
    KeyboardButton("üß† –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ")
)

deck_menu = ReplyKeyboardMarkup(resize_keyboard=True)
deck_menu.add(
    KeyboardButton("üßø –ê—Ä—Ö–µ—Ç–∏–ø—ã"),
    KeyboardButton("ü™∂ –ú—É–¥—Ä–æ—Å—Ç—å"),
    KeyboardButton("üåÄ –ü—Ä–æ—Ü–µ—Å—Å—ã"),
    KeyboardButton("üêæ –ü–æ—Å–ª–∞–Ω–∏—è –∑–≤–µ—Ä–µ–π"),
    KeyboardButton("üêÖ –ñ–∏–≤–æ—Ç–Ω—ã–µ —Å–∏–ª—ã"),
    KeyboardButton("üßö –°–∫–∞–∑–æ—á–Ω—ã–µ –≥–µ—Ä–æ–∏"),
    KeyboardButton("üéØ –§–æ–∫—É—Å –≤–Ω–∏–º–∞–Ω–∏—è"),
    KeyboardButton("üß± –ü—Ä–∏—á–∏–Ω—ã"),
    KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
)

reason_menu = ReplyKeyboardMarkup(resize_keyboard=True)
reason_menu.add(
    KeyboardButton("üî• –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è"),
    KeyboardButton("üò± –°—Ç—Ä–∞—Ö–∏"),
    KeyboardButton("üí´ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è"),
    KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
)

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏, —Å —á–µ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å:",
        reply_markup=main_menu
    )

@bot.message_handler(func=lambda m: m.text == "üìö –ö–æ–ª–æ–¥—ã")
def show_decks(message):
    bot.send_message(
        message.chat.id,
        "–ó–∞–¥—É–º–∞–π—Å—è –Ω–∞–¥ —Å–≤–æ–∏–º –∑–∞–ø—Ä–æ—Å–æ–º. –í—ã–±–µ—Ä–∏ –∫–æ–ª–æ–¥—É –∏ –Ω–∞–∂–º–∏ –Ω–∞ –Ω–µ–µ, –¥–µ—Ä–∂–∞ –≤ –≥–æ–ª–æ–≤–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. –¢—ã –ø–æ–ª—É—á–∏—à—å –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç.",
        reply_markup=deck_menu
    )

@bot.message_handler(func=lambda m: m.text == "üß± –ü—Ä–∏—á–∏–Ω—ã")
def show_reasons(message):
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏, —Å —á–µ–º —Ö–æ—á–µ—à—å –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å:",
        reply_markup=reason_menu
    )

@bot.message_handler(func=lambda m: m.text == "üîÆ –ö–∞—Ä—Ç–∞ –¥–Ω—è")
def daily_message(message):
    all_files = [
        "cards.json", "wise_cards.json", "processes.json",
        "wise_animales.json", "power_animals.json",
        "focus_cards.json", "fairytale_heroes.json"
    ]
    all_cards = []
    for file in all_files:
        all_cards.extend(load_cards(file))
    card = random.choice(all_cards)
    send_card_with_analysis(message.chat.id, card)

@bot.message_handler(func=lambda m: m.text == "üí° –°–æ–≤–µ—Ç")
def handle_advice(message):
    all_files = [
        "wise_cards.json", "processes.json", "focus_cards.json"
    ]
    all_cards = []
    for file in all_files:
        all_cards.extend(load_cards(file))
    if not all_cards:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç –¥–ª—è —Å–æ–≤–µ—Ç–∞.")
        return
    card = random.choice(all_cards)
    send_card_with_analysis(message.chat.id, card)

@bot.message_handler(func=lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def go_back(message):
    bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)

@bot.message_handler(func=lambda m: m.text == "üßø –ê—Ä—Ö–µ—Ç–∏–ø—ã")
def deck_archetypes(message):
    send_random_card_from_file(message, "cards.json")

@bot.message_handler(func=lambda m: m.text == "ü™∂ –ú—É–¥—Ä–æ—Å—Ç—å")
def deck_wisdom(message):
    send_random_card_from_file(message, "wise_cards.json")

@bot.message_handler(func=lambda m: m.text == "üåÄ –ü—Ä–æ—Ü–µ—Å—Å—ã")
def deck_processes(message):
    send_random_card_from_file(message, "processes.json")

@bot.message_handler(func=lambda m: m.text == "üêæ –ü–æ—Å–ª–∞–Ω–∏—è –∑–≤–µ—Ä–µ–π")
def deck_wise_animals(message):
    send_random_card_from_file(message, "wise_animales.json")

@bot.message_handler(func=lambda m: m.text == "üêÖ –ñ–∏–≤–æ—Ç–Ω—ã–µ —Å–∏–ª—ã")
def deck_power_animals(message):
    send_random_card_from_file(message, "power_animals.json")

@bot.message_handler(func=lambda m: m.text == "üßö –°–∫–∞–∑–æ—á–Ω—ã–µ –≥–µ—Ä–æ–∏")
def deck_fairytale(message):
    send_random_card_from_file(message, "fairytale_heroes.json")

@bot.message_handler(func=lambda m: m.text == "üéØ –§–æ–∫—É—Å –≤–Ω–∏–º–∞–Ω–∏—è")
def deck_focus(message):
    send_random_card_from_file(message, "focus_cards.json")

@bot.message_handler(func=lambda m: m.text == "üî• –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è")
def show_transformation(message):
    show_text_from_file(message, "transformation.json")

@bot.message_handler(func=lambda m: m.text == "üò± –°—Ç—Ä–∞—Ö–∏")
def show_fears(message):
    show_text_from_file(message, "fears.json")

@bot.message_handler(func=lambda m: m.text == "üí´ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è")
def show_blessings(message):
    show_text_from_file(message, "blessings.json")

def send_card_with_analysis(chat_id, card):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É", callback_data=f"analyze|{card.get('file_id','')}"))
    if "file_ids" in card:
        for fid in card["file_ids"]:
            bot.send_photo(chat_id, fid, reply_markup=markup)
    elif "file_id" in card:
        bot.send_photo(chat_id, card["file_id"], reply_markup=markup)

def send_random_card_from_file(message, filename):
    cards = load_cards(filename)
    if not cards:
        bot.send_message(message.chat.id, "–ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    card = random.choice(cards)
    send_card_with_analysis(message.chat.id, card)

def show_text_from_file(message, filename):
    try:
        with open(filename, "r", encoding="utf-8") as f:
            data = json.load(f)
        if isinstance(data, list):
            bot.send_message(message.chat.id, random.choice(data))
        else:
            bot.send_message(message.chat.id, "–§–∞–π–ª –Ω–µ –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("analyze|"))
def handle_analysis(call):
    file_id = call.data.split("|")[1]
    bot.send_message(call.message.chat.id, "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞—Ä—Ç—É...")

    file_info = bot.get_file(file_id)
    file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_info.file_path}"
    response = requests.get(file_url)
    img_base64 = base64.b64encode(response.content).decode('utf-8')

    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": "gpt-4-vision-preview",
        "messages": [
            {"role": "system", "content": "–¢—ã –º—É–¥—Ä—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞—Ä—Ç—É –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏, –≥–ª—É–±–æ–∫–æ, –º—è–≥–∫–æ, –ø–æ–º–æ–≥–∞—è –∫–ª–∏–µ–Ω—Ç—É —Å–∞–º–æ–º—É –ø–æ–Ω—è—Ç—å —Å–º—ã—Å–ª."},
            {"role": "user", "content": [
                {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{img_base64}"}},
                {"type": "text", "text": "–ß—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å –Ω–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–µ –∏ –∫–∞–∫–æ–µ —ç—Ç–æ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω—è?"}
            ]}
        ],
        "max_tokens": 500
    }

    completion = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=payload)
    result = completion.json()

    try:
        answer = result["choices"][0]["message"]["content"]
        bot.send_message(call.message.chat.id, answer)
    except:
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

@bot.message_handler(content_types=['photo'])
def handle_photo_for_analysis(message):
    file_id = message.photo[-1].file_id
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üß† –•–æ—á—É –æ–±—Å—É–¥–∏—Ç—å —ç—Ç–æ", callback_data=f"analyze|{file_id}"))
    bot.send_photo(message.chat.id, file_id, caption="–ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.", reply_markup=markup)

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=f"https://{os.environ['RENDER_EXTERNAL_HOSTNAME']}/{TOKEN}")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))

