import telebot
import random
import json
import os
from flask import Flask, request
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

# –¢–æ–∫–µ–Ω –æ—Ç BotFather
TOKEN = "7852344235:AAHy7AZrf2bJ7Zo0wvRHVi7QgNASgvbUvtI"
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞ (–ê—Ä—Ö–µ—Ç–∏–ø—ã)
try:
    with open("cards.json", "r", encoding="utf-8") as f:
        cards = json.load(f)
except Exception as e:
    cards = [{"name": "–û—à–∏–±–∫–∞", "description": str(e)}]

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏—Ç—á–∏ (–ú—É–¥—Ä—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏)
try:
    with open("wise_cards.json", "r", encoding="utf-8") as f:
        wise_cards = json.load(f)
except:
    wise_cards = []

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –µ—Å—Ç—å
users = set()
if os.path.exists("users.txt"):
    with open("users.txt", "r") as f:
        users = set(line.strip() for line in f)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
menu = ReplyKeyboardMarkup(resize_keyboard=True)
menu.add(
    KeyboardButton("üßø –ê—Ä—Ö–µ—Ç–∏–ø—ã"),
    KeyboardButton("ü™∂ –ú—É–¥—Ä–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞")
)

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    users.add(str(message.chat.id))
    with open("users.txt", "w") as f:
        for uid in users:
            f.write(uid + "\n")

    bot.send_message(
        message.chat.id,
        "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –∏ –≤—ã–±–µ—Ä–∏—Ç–µ:",
        reply_markup=menu
    )

# –ö–Ω–æ–ø–∫–∞ "–ê—Ä—Ö–µ—Ç–∏–ø—ã"
@bot.message_handler(func=lambda msg: msg.text == "üßø –ê—Ä—Ö–µ—Ç–∏–ø—ã")
def send_archetype_card(message):
    if not cards:
        bot.send_message(message.chat.id, "–ö–æ–ª–æ–¥–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞ üòï")
        return
    card = random.choice(cards)
    if "file_ids" in card:
        for file_id in card["file_ids"]:
            bot.send_photo(message.chat.id, file_id)
    elif "file_id" in card:
        bot.send_photo(message.chat.id, card["file_id"])
    else:
        bot.send_message(message.chat.id, "–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞")

# –ö–Ω–æ–ø–∫–∞ "–ú—É–¥—Ä–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞"
@bot.message_handler(func=lambda msg: msg.text == "ü™∂ –ú—É–¥—Ä–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞")
def send_wise_card(message):
    if not wise_cards:
        bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –º—É–¥—Ä—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ üßê")
        return
    card = random.choice(wise_cards)
    bot.send_message(message.chat.id, card["text"])

# –ö–æ–º–∞–Ω–¥–∞ /card (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –∫–Ω–æ–ø–∫–µ)
@bot.message_handler(commands=['card'])
def send_card(message):
    send_archetype_card(message)

# –ö–æ–º–∞–Ω–¥–∞ /count_users
@bot.message_handler(commands=['count_users'])
def count_users(message):
    bot.send_message(message.chat.id, f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")

# –≠–∫—Å–ø–æ—Ä—Ç cards.json
@bot.message_handler(commands=['export'])
def export_cards(message):
    try:
        with open("cards.json", "r", encoding="utf-8") as f:
            bot.send_document(message.chat.id, f, visible_file_name="cards.json")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª: {str(e)}")

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
temp_photos = {}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ ‚Äî —Å–±–æ—Ä –ø–∞—Ä—ã
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    chat_id = message.chat.id
    file_id = message.photo[-1].file_id

    bot.send_message(chat_id, f"üìé file_id: {file_id}")

    if chat_id in temp_photos:
        pair = {"file_ids": [temp_photos[chat_id], file_id]}

        try:
            with open("cards.json", "r", encoding="utf-8") as f:
                cards_data = json.load(f)
        except:
            cards_data = []

        cards_data.append(pair)

        try:
            with open("cards.json", "w", encoding="utf-8") as f:
                json.dump(cards_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return

        bot.send_message(chat_id, "‚úÖ –ü–∞—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        temp_photos.pop(chat_id)
    else:
        temp_photos[chat_id] = file_id
        bot.send_message(chat_id, "üì• –ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å –≤—Ç–æ—Ä—É—é.")

# Webhook
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=f"https://{os.environ['RENDER_EXTERNAL_HOSTNAME']}/{TOKEN}")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))

