import telebot
import random
import json
import os
from flask import Flask, request
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

TOKEN = "7852344235:AAHy7AZrf2bJ7Zo0wvRHVi7QgNASgvbUvtI"
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—ã (–∞—Ä—Ö–µ—Ç–∏–ø—ã)
try:
    with open("cards.json", "r", encoding="utf-8") as f:
        cards = json.load(f)
except:
    cards = []

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
menu = ReplyKeyboardMarkup(resize_keyboard=True)
menu.add(KeyboardButton("üßø –ê—Ä—Ö–µ—Ç–∏–ø—ã"))

# /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
        reply_markup=menu
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê—Ä—Ö–µ—Ç–∏–ø—ã"
@bot.message_handler(func=lambda msg: msg.text == "üßø –ê—Ä—Ö–µ—Ç–∏–ø—ã")
def send_archetype_card(message):
    if not cards:
        bot.send_message(message.chat.id, "–ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞ üòï")
        return

    card = random.choice(cards)
    if "file_ids" in card:
        for file_id in card["file_ids"]:
            bot.send_photo(message.chat.id, file_id)
    elif "file_id" in card:
        bot.send_photo(message.chat.id, card["file_id"])

# üëâ –°–∫—Ä—ã—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–µ –æ–ø–∏—Å–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç)

# –≠–∫—Å–ø–æ—Ä—Ç cards.json
@bot.message_handler(commands=['export'])
def export_cards(message):
    try:
        with open("cards.json", "r", encoding="utf-8") as f:
            bot.send_document(message.chat.id, f, visible_file_name="cards.json")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: {str(e)}")

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
temp_photos = {}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    chat_id = message.chat.id
    file_id = message.photo[-1].file_id

    # –ü–æ–∫–∞–∂–∏ file_id
    bot.send_message(chat_id, f"üìé file_id: {file_id}")

    if chat_id in temp_photos:
        pair = {"file_ids": [temp_photos[chat_id], file_id]}

        try:
            with open("cards.json", "r", encoding="utf-8") as f:
                cards_data = json.load(f)
        except:
            cards_data = []

        cards_data.append(pair)

        try:
            with open("cards.json", "w", encoding="utf-8") as f:
                json.dump(cards_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return

        bot.send_message(chat_id, "‚úÖ –ü–∞—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        temp_photos.pop(chat_id)
    else:
        temp_photos[chat_id] = file_id
        bot.send_message(chat_id, "üì• –ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å –≤—Ç–æ—Ä—É—é.")

# Webhook
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=f"https://{os.environ['RENDER_EXTERNAL_HOSTNAME']}/{TOKEN}")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
