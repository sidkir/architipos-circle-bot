import telebot
import random
import json
import os
import requests
import base64
from flask import Flask, request
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = os.environ["TOKEN"]
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

def load_cards(filename):
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return []

main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(
    KeyboardButton("üîÆ –ü–æ—Å–ª–∞–Ω–∏–µ –¥–Ω—è"),
    KeyboardButton("üìö –ö–æ–ª–æ–¥—ã"),
    KeyboardButton("üß± –ü—Ä–∏—á–∏–Ω—ã"),
    KeyboardButton("üß† –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ")
)

deck_menu = ReplyKeyboardMarkup(resize_keyboard=True)
deck_menu.add(
    KeyboardButton("üßø –ê—Ä—Ö–µ—Ç–∏–ø—ã"),
    KeyboardButton("ü™∂ –ú—É–¥—Ä–æ—Å—Ç—å"),
    KeyboardButton("üåÄ –ü—Ä–æ—Ü–µ—Å—Å—ã"),
    KeyboardButton("üêæ –ü–æ—Å–ª–∞–Ω–∏—è –∑–≤–µ—Ä–µ–π"),
    KeyboardButton("üêÖ –ñ–∏–≤–æ—Ç–Ω—ã–µ —Å–∏–ª—ã"),
    KeyboardButton("üßö –°–∫–∞–∑–æ—á–Ω—ã–µ –≥–µ—Ä–æ–∏"),
    KeyboardButton("üéØ –§–æ–∫—É—Å –≤–Ω–∏–º–∞–Ω–∏—è"),
    KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
)

reason_menu = ReplyKeyboardMarkup(resize_keyboard=True)
reason_menu.add(
    KeyboardButton("üî• –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è"),
    KeyboardButton("üò± –°—Ç—Ä–∞—Ö–∏"),
    KeyboardButton("üí´ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è"),
    KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
)

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏, —Å —á–µ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å:",
        reply_markup=main_menu
    )

@bot.message_handler(func=lambda m: m.text == "üìö –ö–æ–ª–æ–¥—ã")
def show_decks(message):
    bot.send_message(
        message.chat.id,
        "–ó–∞–¥—É–º–∞–π—Å—è –Ω–∞–¥ —Å–≤–æ–∏–º –∑–∞–ø—Ä–æ—Å–æ–º. –í—ã–±–µ—Ä–∏ –∫–æ–ª–æ–¥—É –∏ –Ω–∞–∂–º–∏ –Ω–∞ –Ω–µ–µ, –¥–µ—Ä–∂–∞ –≤ –≥–æ–ª–æ–≤–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. –¢—ã –ø–æ–ª—É—á–∏—à—å –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç.",
        reply_markup=deck_menu
    )

@bot.message_handler(func=lambda m: m.text == "üß± –ü—Ä–∏—á–∏–Ω—ã")
def show_reasons(message):
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏, —Å —á–µ–º —Ö–æ—á–µ—à—å –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å:",
        reply_markup=reason_menu
    )

@bot.message_handler(func=lambda m: m.text == "üîÆ –ü–æ—Å–ª–∞–Ω–∏–µ –¥–Ω—è")
def daily_message(message):
    all_files = [
        "cards.json", "wise_cards.json", "processes.json",
        "wise_animales.json", "power_animals.json",
        "focus_cards.json", "fairytale_heroes.json"
    ]
    all_cards = []
    for file in all_files:
        all_cards.extend(load_cards(file))
    card = random.choice(all_cards)
    send_card_with_analysis(message.chat.id, card)
    bot.send_message(message.chat.id, "–≠—Ç–∞ –∫–∞—Ä—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ, —á—Ç–æ –∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å —Ç–µ–±–µ –≤–∞–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å, –ø–æ–Ω—è—Ç—å. –≠—Ç–æ –ø–æ—Å–ª–∞–Ω–∏–µ —Ç–µ–±–µ. –ö–∞–∫–æ–µ –æ–Ω–æ? –ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç —Ç–µ–±–µ —ç—Ç–∞ –∫–∞—Ä—Ç–∞?")

@bot.message_handler(func=lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def go_back(message):
    bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)

@bot.message_handler(func=lambda m: m.text == "üßø –ê—Ä—Ö–µ—Ç–∏–ø—ã")
def deck_archetypes(message):
    send_random_card_from_file(message, "cards.json")

@bot.message_handler(func=lambda m: m.text == "ü™∂ –ú—É–¥—Ä–æ—Å—Ç—å")
def deck_wisdom(message):
    send_random_card_from_file(message, "wise_cards.json")

@bot.message_handler(func=lambda m: m.text == "üåÄ –ü—Ä–æ—Ü–µ—Å—Å—ã")
def deck_processes(message):
    send_random_card_from_file(message, "processes.json")

@bot.message_handler(func=lambda m: m.text == "üêæ –ü–æ—Å–ª–∞–Ω–∏—è –∑–≤–µ—Ä–µ–π")
def deck_wise_animals(message):
    send_random_card_from_file(message, "wise_animales.json")

@bot.message_handler(func=lambda m: m.text == "üêÖ –ñ–∏–≤–æ—Ç–Ω—ã–µ —Å–∏–ª—ã")
def deck_power_animals(message):
    send_random_card_from_file(message, "power_animals.json")

@bot.message_handler(func=lambda m: m.text == "üßö –°–∫–∞–∑–æ—á–Ω—ã–µ –≥–µ—Ä–æ–∏")
def deck_fairytale(message):
    send_random_card_from_file(message, "fairytale_heroes.json")

@bot.message_handler(func=lambda m: m.text == "üéØ –§–æ–∫—É—Å –≤–Ω–∏–º–∞–Ω–∏—è")
def deck_focus(message):
    send_random_card_from_file(message, "focus_cards.json")

def send_random_card_from_file(message, filename):
    cards = load_cards(filename)
    if not cards:
        bot.send_message(message.chat.id, "–ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞ üòï")
        return
    send_card_with_analysis(message.chat.id, random.choice(cards))

last_images = {}

def send_card_with_analysis(chat_id, card):
    if "file_ids" in card:
        for file_id in card["file_ids"]:
            bot.send_photo(chat_id, file_id)
            last_images[chat_id] = file_id
    elif "file_id" in card:
        bot.send_photo(chat_id, card["file_id"])
        last_images[chat_id] = card["file_id"]
    elif "text" in card:
        bot.send_message(chat_id, card["text"])

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É", callback_data="analyze_last"))
    bot.send_message(chat_id, "–•–æ—á–µ—à—å —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–Ω—è—Ç—å –≥–ª—É–±–∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ–π –∫–∞—Ä—Ç—ã?", reply_markup=markup)

@bot.message_handler(content_types=['photo'])
def receive_photo(message):
    file_id = message.photo[-1].file_id
    last_images[message.chat.id] = file_id
    bot.send_photo(message.chat.id, file_id)
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É", callback_data="analyze_last"))
    bot.send_message(message.chat.id, "–•–æ—á–µ—à—å —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–Ω—è—Ç—å –≥–ª—É–±–∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ–π –∫–∞—Ä—Ç—ã?", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "analyze_last")
def analyze_last_card(call):
    chat_id = call.message.chat.id
    file_id = last_images.get(chat_id)
    if not file_id:
        bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    file_info = bot.get_file(file_id)
    file = bot.download_file(file_info.file_path)
    analysis = call_gpt_for_image(file)
    bot.send_message(chat_id, analysis)

@bot.message_handler(func=lambda m: m.text == "üß† –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ")
def prompt_for_photo(message):
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å.")

def call_gpt_for_image(image_bytes):
    base64_image = base64.b64encode(image_bytes).decode('utf-8')
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "gpt-4o",
        "messages": [
            {"role": "system", "content": "–¢—ã –ø—Å–∏—Ö–æ–ª–æ–≥, –∫–æ—É—á –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç –≥–ª—É–±–æ–∫–æ, –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–Ω–æ –∏ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏. –ù–µ –¥–∞–≤–∞–π –ø—Ä—è–º—ã—Ö —É–∫–∞–∑–∞–Ω–∏–π, –ø–æ–º–æ–≥–∞–π –∫–ª–∏–µ–Ω—Ç—É –æ—Å–æ–∑–Ω–∞—Ç—å, —á—Ç–æ –µ–º—É –≤–∞–∂–Ω–æ. –ú–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –Ω–∞–≤–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ—è—Å–Ω–∏—Ç—å —Å–º—ã—Å–ª."},
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏ —Å–∫–∞–∂–∏, —á—Ç–æ –æ–Ω–æ –º–æ–∂–µ—Ç —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å. –ö–∞–∫–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –≤ –Ω–µ–π —Å–∫—Ä—ã—Ç–æ?"},
                    {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"}}
                ]
            }
        ],
        "max_tokens": 700
    }
    response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=data)
    if response.status_code == 200:
        return response.json()["choices"][0]["message"]["content"]
    else:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {response.status_code} ‚Äî {response.text}"

@bot.message_handler(func=lambda m: m.text == "üî• –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è")
def handle_transform(message):
    send_random_text(message, "transformation.json", "üî• –ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è")

@bot.message_handler(func=lambda m: m.text == "üò± –°—Ç—Ä–∞—Ö–∏")
def handle_fears(message):
    send_random_text(message, "fears.json", "üò± –¢–≤–æ–π —Å—Ç—Ä–∞—Ö")

@bot.message_handler(func=lambda m: m.text == "üí´ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è")
def handle_blessings(message):
    send_random_text(message, "blessings.json", "üí´ –¢–≤–æ—ë —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ")

def send_random_text(message, filename, label):
    cards = load_cards(filename)
    if not cards:
        bot.send_message(message.chat.id, f"–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç ‚Äî {label}")
        return
    text = random.choice(cards).get("text", "")
    bot.send_message(message.chat.id, f"{label}:
{text}")

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=f"https://{os.environ['RENDER_EXTERNAL_HOSTNAME']}/{TOKEN}")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
