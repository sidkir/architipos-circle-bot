import telebot
import random
import json
import os
from flask import Flask, request
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

TOKEN = "7852344235:AAHy7AZrf2bJ7Zo0wvRHVi7QgNASgvbUvtI"
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–æ–¥—ã
def load_cards(filename):
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return []

cards = load_cards("cards.json")
wise_cards = load_cards("wise_cards.json")
process_cards = load_cards("processes.json")
wise_animals = load_cards("wise_animales.json")
power_animals = load_cards("power_animals.json")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
menu = ReplyKeyboardMarkup(resize_keyboard=True)
menu.add(
    KeyboardButton("üßø –ê—Ä—Ö–µ—Ç–∏–ø—ã"),
    KeyboardButton("ü™∂ –ú—É–¥—Ä–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞"),
    KeyboardButton("üåÄ –ü—Ä–æ—Ü–µ—Å—Å—ã"),
    KeyboardButton("üêæ –ü–æ—Å–ª–∞–Ω–∏—è –∑–≤–µ—Ä–µ–π"),
    KeyboardButton("üêÖ –ñ–∏–≤–æ—Ç–Ω—ã–µ —Å–∏–ª—ã")
)

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
users = set()
if os.path.exists("users.txt"):
    with open("users.txt", "r") as f:
        users = set(line.strip() for line in f)

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç
user_states = {}

# /start
@bot.message_handler(commands=['start'])
def start(message):
    users.add(str(message.chat.id))
    with open("users.txt", "w") as f:
        for uid in users:
            f.write(uid + "\n")

    bot.send_message(
        message.chat.id,
        "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–¥—É:",
        reply_markup=menu
    )

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ file_id
@bot.message_handler(commands=['show_file'])
def show_file_command(message):
    bot.send_message(message.chat.id, "üìé –í—Å—Ç–∞–≤—å file_id, –∏ —è –ø–æ–∫–∞–∂—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    user_states[message.chat.id] = {"step": "show_file"}

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id, {}).get("step") == "show_file")
def handle_show_file(msg):
    file_id = msg.text.strip()
    try:
        bot.send_photo(msg.chat.id, file_id)
        user_states.pop(msg.chat.id)
    except Exception as e:
        bot.send_message(msg.chat.id, f"‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")

# –ê—Ä—Ö–µ—Ç–∏–ø—ã
@bot.message_handler(func=lambda msg: msg.text == "üßø –ê—Ä—Ö–µ—Ç–∏–ø—ã")
def send_archetype_card(message):
    if not cards:
        bot.send_message(message.chat.id, "–ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞ üòï")
        return
    card = random.choice(cards)
    if "file_ids" in card:
        for file_id in card["file_ids"]:
            bot.send_photo(message.chat.id, file_id)
    elif "file_id" in card:
        bot.send_photo(message.chat.id, card["file_id"])

# –ú—É–¥—Ä–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞
@bot.message_handler(func=lambda msg: msg.text == "ü™∂ –ú—É–¥—Ä–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞")
def send_wise_card(message):
    if not wise_cards:
        bot.send_message(message.chat.id, "–ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞ üòï")
        return
    card = random.choice(wise_cards)
    if "file_id" in card:
        bot.send_photo(message.chat.id, card["file_id"])
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ö–∞—Ä—Ç–∞ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

# –ü—Ä–æ—Ü–µ—Å—Å—ã
@bot.message_handler(func=lambda msg: msg.text == "üåÄ –ü—Ä–æ—Ü–µ—Å—Å—ã")
def send_process_card(message):
    if not process_cards:
        bot.send_message(message.chat.id, "–ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞ üòï")
        return
    card = random.choice(process_cards)
    if "file_id" in card:
        bot.send_photo(message.chat.id, card["file_id"])
    elif "file_ids" in card:
        for file_id in card["file_ids"]:
            bot.send_photo(message.chat.id, file_id)

# –ú—É–¥—Ä—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ
@bot.message_handler(func=lambda msg: msg.text == "üêæ –ü–æ—Å–ª–∞–Ω–∏—è –∑–≤–µ—Ä–µ–π")
def send_wise_animal_card(message):
    if not wise_animals:
        bot.send_message(message.chat.id, "–ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞ üêæ")
        return
    card = random.choice(wise_animals)
    if "file_id" in card:
        bot.send_photo(message.chat.id, card["file_id"])
    elif "file_ids" in card:
        for file_id in card["file_ids"]:
            bot.send_photo(message.chat.id, file_id)

# –ñ–∏–≤–æ—Ç–Ω—ã–µ —Å–∏–ª—ã
@bot.message_handler(func=lambda msg: msg.text == "üêÖ –ñ–∏–≤–æ—Ç–Ω—ã–µ —Å–∏–ª—ã")
def send_power_animal_card(message):
    if not power_animals:
        bot.send_message(message.chat.id, "–ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞ üêÖ")
        return
    card = random.choice(power_animals)
    if "file_id" in card:
        bot.send_photo(message.chat.id, card["file_id"])
    elif "file_ids" in card:
        for file_id in card["file_ids"]:
            bot.send_photo(message.chat.id, file_id)

# –≠–∫—Å–ø–æ—Ä—Ç
@bot.message_handler(commands=['export'])
def export_cards(message):
    for filename in ["cards.json", "wise_cards.json", "processes.json", "wise_animales.json", "power_animals.json"]:
        if os.path.exists(filename):
            with open(filename, "rb") as f:
                bot.send_document(message.chat.id, f, visible_file_name=filename)

# –ö–æ–º–∞–Ω–¥–∞ /add
@bot.message_handler(commands=['add'])
def start_add(message):
    user_states[message.chat.id] = {"step": "count"}
    bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±—É–¥–µ—Ç —É –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã? –í–≤–µ–¥–∏ 1 –∏–ª–∏ 2.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã ‚Äî —à–∞–≥–∏
@bot.message_handler(func=lambda msg: msg.chat.id in user_states)
def handle_state(msg):
    state = user_states[msg.chat.id]

    if state["step"] == "count":
        if msg.text.strip() not in ["1", "2"]:
            bot.send_message(msg.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ 1 –∏–ª–∏ 2.")
            return
        state["count"] = int(msg.text.strip())
        state["step"] = "filename"
        bot.send_message(msg.chat.id, "–ö–∞–∫ –Ω–∞–∑–≤–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç? –ù–∞–ø—Ä–∏–º–µ—Ä: cards.json –∏–ª–∏ wise_cards.json")

    elif state["step"] == "filename":
        state["filename"] = msg.text.strip()
        state["step"] = "waiting_photos"
        state["photos"] = []
        bot.send_message(msg.chat.id, f"–û—Ç–ø—Ä–∞–≤–ª—è–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –í–≤–æ–¥ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /export")

# –°–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
@bot.message_handler(content_types=['photo'])
def collect_photo(message):
    state = user_states.get(message.chat.id)
    if not state or state.get("step") != "waiting_photos":
        return

    file_id = message.photo[-1].file_id
    state["photos"].append(file_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ –ø–æ –ø–∞—Ä–µ
    if state["count"] == 1:
        entry = {"file_id": file_id}
        try:
            data = load_cards(state["filename"])
            data.append(entry)
            with open(state["filename"], "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            bot.send_message(message.chat.id, f"‚úÖ –ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {state['filename']}")
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
    else:
        photos = state["photos"]
        if len(photos) % 2 == 0:
            pair = {"file_ids": [photos[-2], photos[-1]]}
            try:
                data = load_cards(state["filename"])
                data.append(pair)
                with open(state["filename"], "w", encoding="utf-8") as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)
                bot.send_message(message.chat.id, f"‚úÖ –ü–∞—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {state['filename']}")
            except Exception as e:
                bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

# Webhook
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=f"https://{os.environ['RENDER_EXTERNAL_HOSTNAME']}/{TOKEN}")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))

